document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>');
(function () {
'use strict';

var MOUSE_DOWN = "App.MOUSE_DOWN";
var MOUSE_UP = "App.MOUSE_UP";
var MOUSE_MOVE = "App.MOUSE_MOVE";

var mouseDown = function mouseDown(_ref) {
  var x = _ref.x,
      y = _ref.y;

  return {
    type: MOUSE_DOWN,
    value: { x: x, y: y }
  };
};

var mouseUp = function mouseUp(_ref2) {
  var x = _ref2.x,
      y = _ref2.y;

  return {
    type: MOUSE_UP,
    value: { x: x, y: y }
  };
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

// import Canvas from './canvas'
// import ShitCannon from './shit-cannon'

var App = function () {
  function App(_ref) {
    var canvasElement = _ref.canvasElement,
        store = _ref.store;
    classCallCheck(this, App);

    Object.assign(this, {
      store: store,
      isMouseDown: false,
      mousePosition: {
        x: undefined,
        y: undefined
      }
    });

    return this;
  }

  // // // setShitPosition({ x, y }) {
  // // //   this.shit = { x, y }
  // // // }
  // // // 
  // // onWindowResize({ innerWidth: width, innerHeight: height } = window) {
  // //   this.canvas.resize({ width, height })
  // // }
  // 
  // onMouseDown({ x, y }) {
  //   this.isShitting = true
  //   this.setShitPosition({ x, y })
  // }
  // 
  // onMouseMove({ x, y }) {
  //   this.setShitPosition({ x, y })
  // }
  // 
  // onMouseUp({ x, y }) {
  //   this.isShitting = false
  //   this.setShitPosition({ x, y })
  // }

  // onRequestAnimationFrame() {
  //   const {
  //     shitCannon,
  //     isShitting,
  //     shit,
  //   } = this
  //   
  //   shitCannon.update({ 
  //     targetX: shit.x, 
  //     targetY: shit.y, 
  //     isShitting,
  //   })
  //   
  //   /*this.canvas.update({
  //     ...this.shit,
  //     shouldDraw: this.isShitting,
  //   })*/
  //   
  //   window.requestAnimationFrame(() => this.onRequestAnimationFrame())
  // }
  // 


  createClass(App, [{
    key: 'init',
    value: function init() {
      var store = this.store;


      window.addEventListener('mousedown', function (event) {
        return store.dispatch(mouseDown(event));
      });
      window.addEventListener('mouseup', function (event) {
        return store.dispatch(mouseUp(event));
      });
      // this.onWindowResize()
      // window.addEventListener(`resize`, () => this.onWindowResize())
      // window.addEventListener(`mousedown`, event => this.onMouseDown(event))
      // window.addEventListener(`mousemove`, event => this.onMouseMove(event))
      // window.addEventListener(`mouseup`, event => this.onMouseUp(event))
      // window.requestAnimationFrame(() => this.onRequestAnimationFrame())
    }
  }]);
  return App;
}();

var assign = Object.assign;

var Store = function () {
  function Store() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$reducers = _ref.reducers,
        reducers = _ref$reducers === undefined ? {} : _ref$reducers;

    classCallCheck(this, Store);

    var reducerKeys = Object.keys(reducers);
    assign(this, {
      reducers: reducers,
      reducerKeys: reducerKeys,
      state: this.getInitialStateObjectFromReducerKeys({ reducerKeys: reducerKeys })
    });
  }

  createClass(Store, [{
    key: "mapStoreToStateObject",
    value: function mapStoreToStateObject(state, store) {
      return _extends({}, state, defineProperty({}, store, {}));
    }
  }, {
    key: "getInitialStateObjectFromReducerKeys",
    value: function getInitialStateObjectFromReducerKeys() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$reducerKeys = _ref2.reducerKeys,
          reducerKeys = _ref2$reducerKeys === undefined ? [] : _ref2$reducerKeys;

      return reducerKeys.reduce(this.mapStoreToStateObject, {});
    }
  }, {
    key: "reduceStateObject",
    value: function reduceStateObject(_ref3) {
      var state = _ref3.state,
          store = _ref3.store,
          action = _ref3.action,
          reducer = _ref3.reducer;

      return _extends({}, state, defineProperty({}, store, reducer({
        state: state[store],
        action: action
      })));
    }
  }, {
    key: "dispatch",
    value: function dispatch() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          type = _ref4.type,
          value = _ref4.value;

      var reducers = this.reducers,
          reducerKeys = this.reducerKeys,
          state = this.state,
          reduceStateObject = this.reduceStateObject;

      var action = { type: type, value: value };
      var nextState = reducerKeys.reduce(function (state, store) {
        return reduceStateObject({
          state: state,
          store: store,
          action: action,
          reducer: reducers[store]
        });
      }, _extends({}, state));

      this.logStateChange({ type: type, state: state, action: action, nextState: nextState });

      assign(this, {
        state: nextState
      });
    }
  }, {
    key: "logStateChange",
    value: function logStateChange(_ref5) {
      var type = _ref5.type,
          state = _ref5.state,
          action = _ref5.action,
          nextState = _ref5.nextState;

      console.group("Action @ " + type);
      console.log("prev state - ", state);
      console.log("action - ", action);
      console.log("next state - ", nextState);
      console.groupEnd();
    }
  }]);
  return Store;
}();

var initialState = {
  isMouseDown: undefined,
  mousePosition: {
    x: undefined,
    y: undefined
  }
};

var appReducer = (function (_ref) {
  var _ref$state = _ref.state,
      state = _ref$state === undefined ? initialState : _ref$state,
      action = _ref.action;

  switch (action.type) {
    case MOUSE_DOWN:
      return _extends({}, state, {
        isMouseDown: true,
        mousePosition: _extends({}, action.value)
      });

    case MOUSE_UP:
      return _extends({}, state, {
        isMouseDown: false,
        mousePosition: _extends({}, action.value)
      });

    case MOUSE_MOVE:
      return _extends({}, state, {
        mousePosition: _extends({}, action.value)
      });
  }
});

new App({
  canvasElement: document.getElementById('canvas'),
  store: new Store({
    reducers: {
      app: appReducer
    }
  })
}).init();

}());
